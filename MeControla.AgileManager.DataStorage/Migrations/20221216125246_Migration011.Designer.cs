// <auto-generated />
using System;
using MeControla.AgileManager.DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeControla.AgileManager.DataStorage.Migrations
{
    [DbContext(typeof(DbAppContext))]
    [Migration("20221216125246_Migration011")]
    partial class Migration011
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.ClassOfService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("cof_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cof_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("cof_name");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("cof_uuid");

                    b.HasKey("Id");

                    b.ToTable("am_class_of_service", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.CustomField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("cfd_id");

                    b.Property<string>("Custom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("cfd_custom");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cfd_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("cfd_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("cfd_type");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("cfd_uuid");

                    b.HasKey("Id");

                    b.ToTable("am_custom_field", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Issue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("iss_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_created");

                    b.Property<bool>("Incident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("iss_incident");

                    b.Property<long>("IssueTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("istp_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_key");

                    b.Property<string>("Labels")
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_labels");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_link");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<DateTime?>("Resolved")
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_resolved");

                    b.Property<long>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stt_id");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_summary");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_updated");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("iss_uuid");

                    b.HasKey("Id");

                    b.HasIndex("IssueTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("am_issue", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueCustomfieldData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isep_id");

                    b.Property<long>("CustomFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cfd_id");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iss_id");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("isep_uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("isep_value");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("IssueId");

                    b.ToTable("am_issue_customfield_data", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueEpic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isep_id");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iss_id");

                    b.Property<decimal>("Progress")
                        .HasColumnType("TEXT")
                        .HasColumnName("isep_progress");

                    b.Property<long?>("QuarterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("qrt_id");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("isep_uuid");

                    b.HasKey("Id");

                    b.HasIndex("IssueId")
                        .IsUnique();

                    b.HasIndex("QuarterId");

                    b.ToTable("am_issue_epic", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueExtraData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iss_id");

                    b.Property<long?>("ClassOfServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cof_id");

                    b.Property<decimal>("CustomerLeadTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ied_customer_lead_time");

                    b.Property<decimal>("DiscoveryLeadTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ied_discovery_lead_time");

                    b.Property<bool>("Impediment")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ied_impediment");

                    b.Property<decimal>("StoryPoints")
                        .HasColumnType("TEXT")
                        .HasColumnName("ied_story_points");

                    b.Property<decimal>("SystemLeadTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ied_system_lead_time");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("ied_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassOfServiceId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("am_issue_extra_data", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueImpediment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("isim_id");

                    b.Property<DateTime?>("End")
                        .HasColumnType("TEXT")
                        .HasColumnName("isim_end");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iss_id");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT")
                        .HasColumnName("isim_start");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("isim_uuid");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("am_issue_impediment", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ish_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ish_date_time");

                    b.Property<long>("FromStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ish_from_status_id");

                    b.Property<long>("IssueId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("iss_id");

                    b.Property<long>("ToStatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ish_to_status_id");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("ish_uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("IssueId");

                    b.HasIndex("ToStatusId");

                    b.ToTable("am_issue_status_history", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("istp_id");

                    b.Property<long>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnName("istp_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("istp_name");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("istp_uuid");

                    b.HasKey("Id");

                    b.ToTable("am_issue_type", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Period", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("prd_id");

                    b.Property<DateTime?>("Final")
                        .HasColumnType("TEXT")
                        .HasColumnName("prd_final");

                    b.Property<DateTime>("Initial")
                        .HasColumnType("TEXT")
                        .HasColumnName("prd_initial");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("prd_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prd_name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<uint>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prd_type");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("prd_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("am_period", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceClassOfService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pcos_id");

                    b.Property<long>("ClassOfServiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cof_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("pcos_name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<uint>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pcos_type");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("pcos_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassOfServiceId")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("am_preference_class_of_service", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceCustomField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pcf_id");

                    b.Property<long>("CustomFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cfd_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("pcf_name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<uint>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pcf_type");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("pcf_uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("am_preference_custom_field", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceIssueType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pit_id");

                    b.Property<long?>("IssueTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("istp_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("pit_name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<long?>("ProjectId1")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pit_type");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("pit_uuid");

                    b.HasKey("Id");

                    b.HasIndex("IssueTypeId")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.ToTable("am_preference_issue_type", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("psc_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("psc_name");

                    b.Property<uint>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0u)
                        .HasColumnName("psc_order");

                    b.Property<decimal>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasColumnName("psc_progress");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<long>("StatusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stt_id");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("psc_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.ToTable("am_preference_status", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceStatusCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("psc_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("psc_name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<long>("StatusCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stct_id");

                    b.Property<uint>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("psc_type");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("psc_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusCategoryId")
                        .IsUnique();

                    b.ToTable("am_preference_status_category", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_id");

                    b.Property<long>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("prj_name");

                    b.Property<long>("ProjectCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_project_category_id");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prj_selected");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("prj_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("am_project", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.ProjectCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pjct_id");

                    b.Property<long>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pjct_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("pjct_name");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("pjct_uuid");

                    b.HasKey("Id");

                    b.ToTable("am_project_category", "agile_manager");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Key = 0L,
                            Name = "No Category",
                            Uuid = new Guid("042b72f2-0848-47a1-bb11-8ed69b0caf7e")
                        });
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Quarter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("qrt_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("qrt_name");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("qrt_uuid");

                    b.HasKey("Id");

                    b.ToTable("am_quarter", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("stt_id");

                    b.Property<long>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stt_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("stt_name");

                    b.Property<long>("StatusCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stct_id");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("stt_uuid");

                    b.HasKey("Id");

                    b.HasIndex("StatusCategoryId");

                    b.ToTable("am_status", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.StatusCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("stct_id");

                    b.Property<long>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stct_key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("stct_name");

                    b.Property<Guid>("Uuid")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT")
                        .HasColumnName("stct_uuid");

                    b.HasKey("Id");

                    b.ToTable("am_status_category", "agile_manager");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Issue", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.IssueType", "IssueType")
                        .WithMany("Issues")
                        .HasForeignKey("IssueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Status", "Status")
                        .WithMany("Issues")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueType");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueCustomfieldData", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.CustomField", "CustomField")
                        .WithMany("CustomfieldsData")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Issue", "Issue")
                        .WithMany("CustomfieldsData")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomField");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueEpic", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.Issue", "Issue")
                        .WithOne("IssueEpic")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.IssueEpic", "IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Quarter", "Quarter")
                        .WithMany("Epics")
                        .HasForeignKey("QuarterId");

                    b.Navigation("Issue");

                    b.Navigation("Quarter");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueExtraData", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.ClassOfService", "ClassOfService")
                        .WithMany("IssueExtraDatas")
                        .HasForeignKey("ClassOfServiceId");

                    b.HasOne("MeControla.AgileManager.Data.Entities.Issue", "Issue")
                        .WithOne("ExtraData")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.IssueExtraData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassOfService");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueImpediment", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.Issue", "Issue")
                        .WithMany("Impediments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueStatusHistory", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.Status", "FromStatus")
                        .WithMany()
                        .HasForeignKey("FromStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Issue", "Issue")
                        .WithMany("Statuses")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Status", "ToStatus")
                        .WithMany()
                        .HasForeignKey("ToStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStatus");

                    b.Navigation("Issue");

                    b.Navigation("ToStatus");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Period", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceClassOfService", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.ClassOfService", "ClassOfService")
                        .WithOne("Preference")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.PreferenceClassOfService", "ClassOfServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany("PreferenceClassOfService")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassOfService");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceCustomField", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.CustomField", "CustomField")
                        .WithOne("Preference")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.PreferenceCustomField", "CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany("PreferenceCustomField")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomField");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceIssueType", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.IssueType", "IssueType")
                        .WithOne("Preference")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.PreferenceIssueType", "IssueTypeId");

                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", null)
                        .WithMany("PreferenceIssueType")
                        .HasForeignKey("ProjectId1");

                    b.Navigation("IssueType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceStatus", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany("PreferenceStatus")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.Status", "Status")
                        .WithOne("Preference")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.PreferenceStatus", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.PreferenceStatusCategory", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.Project", "Project")
                        .WithMany("PreferenceStatusCategory")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeControla.AgileManager.Data.Entities.StatusCategory", "StatusCategory")
                        .WithOne("Preference")
                        .HasForeignKey("MeControla.AgileManager.Data.Entities.PreferenceStatusCategory", "StatusCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("StatusCategory");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Project", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.ProjectCategory", "ProjectCategory")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Status", b =>
                {
                    b.HasOne("MeControla.AgileManager.Data.Entities.StatusCategory", "StatusCategory")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusCategory");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.ClassOfService", b =>
                {
                    b.Navigation("IssueExtraDatas");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.CustomField", b =>
                {
                    b.Navigation("CustomfieldsData");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Issue", b =>
                {
                    b.Navigation("CustomfieldsData");

                    b.Navigation("ExtraData");

                    b.Navigation("Impediments");

                    b.Navigation("IssueEpic");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.IssueType", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Project", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("PreferenceClassOfService");

                    b.Navigation("PreferenceCustomField");

                    b.Navigation("PreferenceIssueType");

                    b.Navigation("PreferenceStatus");

                    b.Navigation("PreferenceStatusCategory");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.ProjectCategory", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Quarter", b =>
                {
                    b.Navigation("Epics");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.Status", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("Preference");
                });

            modelBuilder.Entity("MeControla.AgileManager.Data.Entities.StatusCategory", b =>
                {
                    b.Navigation("Preference");

                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
